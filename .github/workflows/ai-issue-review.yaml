name: 'AI Issue Review (Azure)'
on:
  issues:
    types: [labeled]

jobs:
  inference:
    if: contains(github.event.issue.labels.*.name, 'ai-review')
    permissions:
      issues: write
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: AI Review of Issue
        id: inference
        env:
          AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
        run: |
          # Install required packages
          pip install requests

          # Create Python script for API call
          cat > azure_openai_call.py << 'EOF'
          import os
          import json
          import requests
          import sys

          # Get the issue body from arguments
          issue_body = sys.argv[1]

          # System prompt
          system_prompt = """
          You are an expert project reviewer. Using the following **Definition of Ready** checklist, review the initiative documentation. For each criterion, state whether it is **fully met**, **partially met**, or **missing**. Offer specific, actionable feedback and suggest what additional information is needed if any criteria are not fully met.

          **Important:**  
          Use your expert judgment to determine whether certain items (such as an architecture diagram or performance testing) are necessary for this initiative. Not all criteria are mandatory for every project—please indicate if you believe an item is not required and briefly explain why.

          ---

          ## Response Format

          Use the following symbols for each criterion:

          - ✅ if the criterion is fully met  
          - ⚠️ if the criterion is partially met (explain what is missing)  
          - ❌ if the criterion is missing (explain why this is important and what is needed)

          | Topic                       | Complete / What is still outstanding? (✅ / ⚠️ / ❌) | Notes/Feedback                                                                                 |
          |-----------------------------|-----------------------------------------------------|------------------------------------------------------------------------------------------------|
          | 1. Prioritisation & Review  | ⚠️                                                  | 1.1 Unsure who is completing what (e.g., who is performing cutover of environment?)<br>1.3 Fully met |
          | 2. Expected Outcomes        | ✅                                                  |                                                                                                |
          | 3. Sizing & Scope           | ✅                                                  |                                                                                                |
          | 4. Technical Readiness      |                                                     |                                                                                                |
          | 5. Readiness Checks         |                                                     |                                                                                                |

          ---

          ## Definition of Ready

          ### 1. Problem Statement
          - 1.1 The problem or opportunity is clearly articulated, providing context for why this initiative is needed.
          
          ### 2. Business Need & Benefit
          - 2.1 The business need is defined, including the expected benefits or value to be delivered by this initiative.
          
          ### 3. Requirements & Scope
          - 3.1 Requirements are documented, with clear definitions of what is in scope and out of scope.
          - 3.2 Acceptance criteria are outlined, ensuring a shared understanding of what success looks like.
          
          ### 4. Measurable Outcomes
          - 4.1 The initiative has defined, measurable outcomes or success metrics.
          
          ### 5. Blockers, Risks & Issues
          - 5.1 All known blockers, risks, and issues are identified and documented.
          - 5.2 Mitigation strategies or contingency plans are outlined where possible.
          
          ### 6. Dependencies
          - 6.1 All internal and external dependencies are identified.
          - 6.2 Where possible, dependencies are resolved or have a clear plan for resolution.
          
          ### 7. High-Level Solution Design
          - 7.1 A high-level solution design or approach is considered and documented.
          - 7.2 Any major technical considerations or constraints are noted.
          - 7.3 Relevant technical documentation (e.g., architecture diagrams, impacted systems) is referenced if available.
          
          ### 8. High-Level Timelines & Limitations
          - 8.1 High-level timelines or target delivery windows are identified.
          - 8.2 Any known scheduling limitations or constraints are documented.
          
          ### 9. Stakeholders
          - 9.1 All relevant stakeholders are identified, including business owners, technical leads, and external partners if applicable.
          - 9.2 Stakeholder roles and responsibilities are clear.
          - 9.3 The initiative has been prioritised by the relevant stakeholders (e.g., external stakeholders have agreed on the dates).
          
          ### 10. Supporting Documentation
          - 10.1 Any relevant Confluence pages or supporting documentation are linked or referenced.
          - 10.2 All relevant technical details (such as repository information, existing systems impacted, and required integrations) are captured if they add value at this stage.
          ---

          **Tip:**  
          When reviewing, use the table above and add your notes/feedback for each sub-criterion as needed. If you believe a criterion is not required for the specific initiative, note "Not required" and briefly explain your reasoning.
          """

          # Azure OpenAI API endpoint
          endpoint = "https://ai-foundry-pocs.openai.azure.com/openai/deployments/gpt-4.1/chat/completions?api-version=2025-01-01-preview"
          api_key = os.environ.get("AZURE_OPENAI_API_KEY")

          # Request headers
          headers = {
              "Content-Type": "application/json",
              "api-key": api_key
          }

          # Request payload
          payload = {
              "messages": [
                  {"role": "system", "content": system_prompt},
                  {"role": "user", "content": issue_body}
              ],
              "max_tokens": 10000
          }

          # Make the API call
          response = requests.post(endpoint, headers=headers, json=payload)
          
          if response.status_code == 200:
              result = response.json()
              ai_response = result["choices"][0]["message"]["content"]
              print(ai_response)
              
              # Save to file for GitHub Actions output
              with open("ai_response.txt", "w") as f:
                  f.write(ai_response)
          else:
              print(f"Error: {response.status_code}")
              print(response.text)
              exit(1)
          EOF

          # Run the Python script with the issue body
          python azure_openai_call.py "${{ github.event.issue.body }}" > ai_response.txt
          
          # Set the output for use in the next step
          echo "response<<EOF" >> $GITHUB_OUTPUT
          cat ai_response.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Add AI Review Comment to Issue
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🤖 AI Review Results (Azure)\n\n${{ steps.inference.outputs.response }}`
            })