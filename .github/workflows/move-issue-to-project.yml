name: Add Issue to Project ðŸ“‹ Backlog Column

on:
  issues:
    types: [opened]

jobs:
  add-to-project:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.SECRET_PAT }}
      PROJECT_OWNER: hmcts
      PROJECT_NUMBER: 10
      ISSUE_URL: ${{ github.event.issue.html_url }}
    steps:
      - name: Add issue to project ðŸ“‹ Backlog column
        run: |
          # Get project ID
          PROJECT_ID=$(gh project view $PROJECT_NUMBER --owner $PROJECT_OWNER --format json | jq -r '.id')
          echo "Project ID: $PROJECT_ID"

          # Add issue to project
          echo "Adding issue to project..."
          ITEM_ID=$(gh project item-add $PROJECT_NUMBER --owner "$PROJECT_OWNER" --url "$ISSUE_URL" --format json | jq -r '.id')
          echo "ITEM_ID: $ITEM_ID"

          if [ -z "$ITEM_ID" ]; then
            echo "Error: Failed to add issue to project."
            exit 1
          fi

          # Get the Status field ID and ðŸ“‹ Backlog option ID
          echo "Fetching project fields..."
          FIELDS=$(gh project field-list $PROJECT_NUMBER --owner "$PROJECT_OWNER" --format json)
          STATUS_FIELD=$(echo "$FIELDS" | jq -r '.fields[] | select(.name == "Status")')
          STATUS_FIELD_ID=$(echo "$STATUS_FIELD" | jq -r '.id')
          TODO_OPTION_ID=$(echo "$STATUS_FIELD" | jq -r '.options[] | select(.name == "ðŸ“‹ Backlog") | .id')

          echo "STATUS_FIELD_ID: $STATUS_FIELD_ID"
          echo "TODO_OPTION_ID: $TODO_OPTION_ID"

          if [ -z "$STATUS_FIELD_ID" ] || [ -z "$TODO_OPTION_ID" ]; then
            echo "Error: Could not find Status field or ðŸ“‹ Backlog option."
            exit 1
          fi

          # Set the Status to ðŸ“‹ Backlog using pagination
          echo "Setting issue status to ðŸ“‹ Backlog..."
          cursor=""
          page=1
          
          while true; do
            echo "Fetching page $page..."
            query_result=""
            
            if [ -z "$cursor" ]; then
              query_result=$(gh project item-list $PROJECT_NUMBER --owner "$PROJECT_OWNER" --limit 100 --format json)
            else
              query_result=$(gh project item-list $PROJECT_NUMBER --owner "$PROJECT_OWNER" --limit 100 --format json --cursor "$cursor")
            fi

            echo "Page $page: $(echo "$query_result" | jq '.items | length') items"
            
            # Update the issue status if found in this page
            RESULT=$(gh project item-edit $PROJECT_NUMBER \
              --id "$ITEM_ID" \
              --project-id "$PROJECT_ID" \
              --field-id "$STATUS_FIELD_ID" \
              --single-select-option-id "$TODO_OPTION_ID" \
              --format json)

            if echo "$RESULT" | jq -e '.id' > /dev/null; then
              echo "Issue successfully added to project and set to ðŸ“‹ Backlog status."
              exit 0
            fi

            # Check if there are more pages
            has_next_page=$(echo "$query_result" | jq -r '.hasNextPage')
            cursor=$(echo "$query_result" | jq -r '.nextCursor')

            echo "Has next page: $has_next_page"
            echo "Next cursor: $cursor"

            if [ "$has_next_page" != "true" ] || [ "$cursor" = "null" ]; then
              echo "Error: Could not find the issue in the project after checking all pages."
              exit 1
            fi

            ((page++))
          done